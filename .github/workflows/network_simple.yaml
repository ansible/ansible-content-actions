name: Network simple tests

on:
  workflow_call:
    inputs:
      ansible_version:
        description: Ansible-core ref to test (e.g. milestone, devel, stable-2.18)
        required: true
        type: string
      lab_nodes:
        description: JSON data with lab node information to pass to tests
        required: true
        type: string
    secrets: {}

jobs:
  integration:
    name: 'With - ${{ inputs.ansible_version }}'
    runs-on: ubuntu-latest
    env:
      PY_COLORS: '1'
      source_directory: './source'
      ANSIBLE_COLLECTIONS_PATHS: '/home/runner/collections:~/.ansible/collections:/usr/share/ansible/collections'
    steps:
      - name: Checkout the collection repository
        uses: ansible-network/github_actions/.github/actions/checkout_dependency@main
        with:
          path: ${{ env.source_directory }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: "0"

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Upgrade pip and wheel
        run: python3 -m pip install --upgrade pip wheel ansible-pylibssh

      - name: Install ansible-core (${{ inputs.ansible_version }}) - Release/Tag
        run: python3 -m pip install https://github.com/ansible/ansible/archive/${{ inputs.ansible_version }}.tar.gz --disable-pip-version-check
        if: ${{ !contains(inputs.ansible_version, 'devel') && !contains(inputs.ansible_version, 'milestone') }}

      - name: Checkout ansible-core (${{ inputs.ansible_version }}) - Branch
        uses: actions/checkout@v4
        with:
          repository: ansible/ansible
          ref: ${{ inputs.ansible_version }}
          path: ansible-core-source
        if: ${{ contains(inputs.ansible_version, 'devel') || contains(inputs.ansible_version, 'milestone') }}

      - name: Install ansible-core (${{ inputs.ansible_version }}) - Branch
        run: python3 -m pip install ./ansible-core-source --disable-pip-version-check
        if: ${{ contains(inputs.ansible_version, 'devel') || contains(inputs.ansible_version, 'milestone') }}

      - name: Read collection metadata from galaxy.yml
        id: identify
        uses: ansible-network/github_actions/.github/actions/identify_collection@main
        with:
          source_path: ${{ env.source_directory }}

      - name: Build and install the collection
        uses: ansible-network/github_actions/.github/actions/build_install_collection@main
        with:
          install_python_dependencies: true
          source_path: ${{ env.source_directory }}
          collection_path: ${{ steps.identify.outputs.collection_path }}
          tar_file: ${{ steps.identify.outputs.tar_file }}
          ansible_version: ${{ inputs.ansible_version }}

      - name: Print the ansible version
        run: ansible --version

      - name: Debug lab_nodes input
        shell: bash
        env:
          LAB_NODES: ${{ inputs.lab_nodes }}
        run: |
          echo 'LAB_NODES (raw):'
          echo "$LAB_NODES"
          echo

      - name: Generate inventory from lab_nodes and template
        id: render_inventory
        shell: bash
        working-directory: ${{ steps.identify.outputs.collection_path }}
        env:
          LAB_NODES_JSON: ${{ inputs.lab_nodes }}
          ANSIBLE_VERSION_KEY: ${{ inputs.ansible_version }}
          RUNNER_TEMP: ${{ runner.temp }}
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null 2>&1 || true
            sudo apt-get install -y jq >/dev/null 2>&1 || true
          fi
          ansible_host=$(echo "$LAB_NODES_JSON" | jq -r ".nodes[\"$ANSIBLE_VERSION_KEY\"]")
          if [ -z "$ansible_host" ] || [ "$ansible_host" = "null" ]; then
            echo "No node found for key: $ANSIBLE_VERSION_KEY"
            echo "Available keys:" $(echo "$LAB_NODES_JSON" | jq -r '.nodes | keys | join(", ")')
            exit 1
          fi
          last_octet="${ansible_host##*.}"
          ssh_port=$((last_octet + 2000))
          https_port=$((last_octet + 4000))
          http_port=$((last_octet + 8000))
          netconf_port=$((last_octet + 3000))
          dest_host="54.190.208.146"
          out_file="$RUNNER_TEMP/inventory-$ANSIBLE_VERSION_KEY.ini"
          ansible localhost -c local -m template -a "src=tests/integration/labs/inventory.j2 dest=$out_file mode=0644" \
            -e "host_label=$ANSIBLE_VERSION_KEY ansible_host=$dest_host ansible_ssh_port=$ssh_port ansible_http_port=$http_port ansible_netconf_port=$netconf_port"
          echo "inventory_path=$out_file" >> "$GITHUB_OUTPUT"

      # - name: Debug inventory
      #   shell: bash
      #   run: |
      #     echo "Inventory path: ${{ steps.render_inventory.outputs.inventory_path }}"
      #     echo
      #     cat "${{ steps.render_inventory.outputs.inventory_path }}"

      - name: Run ansible-test network-integration
        run: ansible-test network-integration --inventory "${{ steps.render_inventory.outputs.inventory_path }}" -vvvv
        working-directory: ${{ steps.identify.outputs.collection_path }}
        env:
          LAB_NODES: ${{ inputs.lab_nodes }}
