name: Integration tests
on:
  workflow_call:
    inputs:
      collection_pre_install:
        required: false
        type: string
        default: ""
      lab_title:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      cml_lab:
        default: tests/integration/labs/single.yaml
        required: false
        type: string
      integration_test_path:
        default: tests/integration/targets
        required: false
        type: string
      network_os:
        required: true
        type: string
      pytest_addopts:
        default: ""
        required: false
        type: string
      dry_run:
        required: false
        type: boolean
        default: false
      dry_run_repo:
        required: false
        type: string
        default: ""

    secrets:
      cml_ssh_password:
        required: true
      virl_password:
        required: true
      virl_host:
        required: true

jobs:
  integration:
    env:
      PY_COLORS: "1"
      source_directory: "./source"
      dependency_directory: "./dependency"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ansible-version:
          - stable-2.18
          - stable-2.19
          - stable-2.16
          # - stable-2.15
          - milestone
          - devel
        python-version:
          - "3.12" # this should always be a common denominator for all the ansible versions
          # https://github.com/ansible/tox-ansible/blob/main/src/tox_ansible/plugin.py#L45
        dependency-source:
          - github

    name: "Integration Tests - Python ${{ matrix.python-version }} / Ansible ${{ matrix.ansible-version }} / ${{ matrix.dependency-source }}"
    steps:
      - name: Checkout the collection repository
        uses: ansible-network/github_actions/.github/actions/checkout_dependency@main
        with:
          path: ${{ env.source_directory }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: "0"
        if: ${{ !inputs.dry_run }}

      - name: Checkout the collection repository
        uses: ansible-network/github_actions/.github/actions/checkout_dependency@main
        with:
          repository: ${{ inputs.dry_run_repo }}
          path: ${{ env.source_directory }}
          fetch-depth: "0"
        if: ${{ inputs.dry_run }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install wheel now for faster builds
        run: python3 -m pip install wheel --upgrade

      - name: Install ansible-core (${{ matrix.ansible-version }}) - Release/Tag
        run: python3 -m pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible-version }}.tar.gz --disable-pip-version-check
        if: ${{ !contains(matrix.ansible-version, 'devel') && !contains(matrix.ansible-version, 'milestone') }}

      - name: Checkout ansible-core (${{ matrix.ansible-version }}) - Branch
        uses: actions/checkout@v4
        with:
          repository: ansible/ansible
          ref: ${{ matrix.ansible-version }}
          path: ansible-core-source
        if: ${{ contains(matrix.ansible-version, 'devel') || contains(matrix.ansible-version, 'milestone') }}

      - name: Install ansible-core (${{ matrix.ansible-version }}) - Branch
        run: python3 -m pip install ./ansible-core-source --disable-pip-version-check
        if: ${{ contains(matrix.ansible-version, 'devel') || contains(matrix.ansible-version, 'milestone') }}

      - name: Parse PR body for dependency information
        id: parse_dependencies
        run: |
          echo "netcommon_pr=" >> $GITHUB_OUTPUT
          echo "utils_pr=" >> $GITHUB_OUTPUT
          echo "netcommon_fallback=" >> $GITHUB_OUTPUT
          echo "utils_fallback=" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_BODY="${{ github.event.pull_request.body }}"
          elif [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            PR_BODY="${{ github.event.pull_request.body }}"
          else
            PR_BODY=""
          fi

          if [[ -n "$PR_BODY" ]]; then
            NETCOMMON_PR=$(echo "$PR_BODY" | grep -i "depends on" | grep -o "ansible-collections/ansible\.netcommon[/pull]*[/#][0-9]\+" | head -1 | grep -o "[0-9]\+$" || echo "")
            if [[ -n "$NETCOMMON_PR" ]]; then
              echo "netcommon_pr=$NETCOMMON_PR" >> $GITHUB_OUTPUT
              echo "Found netcommon dependency: PR #$NETCOMMON_PR"
            else
              echo "netcommon_fallback=true" >> $GITHUB_OUTPUT
              echo "No netcommon dependency found, will fallback to collection_pre_install"
            fi

            UTILS_PR=$(echo "$PR_BODY" | grep -i "depends on" | grep -o "ansible-collections/ansible\.utils[/pull]*[/#][0-9]\+" | head -1 | grep -o "[0-9]\+$" || echo "")
            if [[ -n "$UTILS_PR" ]]; then
              echo "utils_pr=$UTILS_PR" >> $GITHUB_OUTPUT
              echo "Found utils dependency: PR #$UTILS_PR"
            else
              echo "utils_fallback=true" >> $GITHUB_OUTPUT
              echo "No utils dependency found, will fallback to collection_pre_install"
            fi
          else
            echo "No PR body found, will fallback to collection_pre_install for all dependencies"
            echo "netcommon_fallback=true" >> $GITHUB_OUTPUT
            echo "utils_fallback=true" >> $GITHUB_OUTPUT
          fi
        if: ${{ !inputs.dry_run }}

      - name: Checkout ansible.netcommon dependency PR
        uses: ansible-network/github_actions/.github/actions/checkout_dependency@main
        with:
          repository: ansible-collections/ansible.netcommon
          ref: refs/pull/${{ steps.parse_dependencies.outputs.netcommon_pr }}/head
          path: ${{ env.dependency_directory }}/ansible_collections/ansible/netcommon
          fetch-depth: "0"
        if: ${{ !inputs.dry_run && steps.parse_dependencies.outputs.netcommon_pr != '' }}

      - name: Checkout ansible.utils dependency PR
        uses: ansible-network/github_actions/.github/actions/checkout_dependency@main
        with:
          repository: ansible-collections/ansible.utils
          ref: refs/pull/${{ steps.parse_dependencies.outputs.utils_pr }}/head
          path: ${{ env.dependency_directory }}/ansible_collections/ansible/utils
          fetch-depth: "0"
        if: ${{ !inputs.dry_run && steps.parse_dependencies.outputs.utils_pr != '' }}

      - name: Pre install collections dependencies first so the collection install does not
        run: |
          INSTALL_CMD="ansible-galaxy collection install --pre"
          COLLECTIONS_TO_INSTALL=""

          if [[ "${{ steps.parse_dependencies.outputs.netcommon_fallback }}" == "true" ]]; then
            if [[ "${{ inputs.collection_pre_install }}" =~ ansible\.netcommon ]]; then
              NETCOMMON_VERSION=$(echo "${{ inputs.collection_pre_install }}" | grep -o "ansible\.netcommon[^[:space:]]*" | head -1)
              if [[ -n "$NETCOMMON_VERSION" ]]; then
                COLLECTIONS_TO_INSTALL="$COLLECTIONS_TO_INSTALL $NETCOMMON_VERSION"
              fi
            fi
          fi

          if [[ "${{ steps.parse_dependencies.outputs.utils_fallback }}" == "true" ]]; then
            if [[ "${{ inputs.collection_pre_install }}" =~ ansible\.utils ]]; then
              UTILS_VERSION=$(echo "${{ inputs.collection_pre_install }}" | grep -o "ansible\.utils[^[:space:]]*" | head -1)
              if [[ -n "$UTILS_VERSION" ]]; then
                COLLECTIONS_TO_INSTALL="$COLLECTIONS_TO_INSTALL $UTILS_VERSION"
              fi
            fi
          fi

          if [[ -n "${{ inputs.collection_pre_install }}" ]]; then
            OTHER_COLLECTIONS=$(echo "${{ inputs.collection_pre_install }}" | sed 's/ansible\.netcommon[^[:space:]]*//g' | sed 's/ansible\.utils[^[:space:]]*//g' | xargs)
            if [[ -n "$OTHER_COLLECTIONS" ]]; then
              COLLECTIONS_TO_INSTALL="$COLLECTIONS_TO_INSTALL $OTHER_COLLECTIONS"
            fi
          fi

          if [[ -n "$COLLECTIONS_TO_INSTALL" ]]; then
            echo "Running: $INSTALL_CMD $COLLECTIONS_TO_INSTALL -p /home/runner/collections"
            $INSTALL_CMD $COLLECTIONS_TO_INSTALL -p /home/runner/collections
          else
            echo "No collections to pre-install"
          fi
        if: inputs.collection_pre_install != ''

      - name: Read collection metadata from galaxy.yml
        id: identify
        uses: ansible-network/github_actions/.github/actions/identify_collection@main
        with:
          source_path: ${{ env.source_directory }}

      - name: Build and install dependency collections from PRs
        run: |
          if [[ -d "${{ env.dependency_directory }}/ansible_collections/ansible/netcommon" ]]; then
            echo "Installing ansible.netcommon from PR dependency"
            cd "${{ env.dependency_directory }}/ansible_collections/ansible/netcommon"
            ansible-galaxy collection build . --output-path /tmp/
            ansible-galaxy collection install /tmp/ansible-netcommon-*.tar.gz -p /home/runner/collections --force
          fi

          if [[ -d "${{ env.dependency_directory }}/ansible_collections/ansible/utils" ]]; then
            echo "Installing ansible.utils from PR dependency"
            cd "${{ env.dependency_directory }}/ansible_collections/ansible/utils"
            ansible-galaxy collection build . --output-path /tmp/
            ansible-galaxy collection install /tmp/ansible-utils-*.tar.gz -p /home/runner/collections --force
          fi
        if: ${{ !inputs.dry_run }}

      - name: Build and install the collection
        uses: ansible-network/github_actions/.github/actions/build_install_collection@main
        with:
          install_python_dependencies: true
          source_path: ${{ env.source_directory }}
          collection_path: ${{ steps.identify.outputs.collection_path }}
          tar_file: ${{ steps.identify.outputs.tar_file }}
          ansible_version: ${{ matrix.ansible-version }}

      - name: Print the ansible version
        run: ansible --version

      - name: Install the integration test dependency
        run: python3 -m pip install git+https://github.com/ansible-network/pytest-ansible-network-integration.git

      - name: Install the rest of the dependencies
        run: python3 -m pip install cmlutils pytest-xdist virl2_client==2.7.1

      - name: Clear current lab id if any
        if: ${{ !inputs.dry_run }}
        run: "cml clear"
        continue-on-error: true
        env:
          CML_VERIFY_CERT: false
          VIRL_HOST: ${{ secrets.virl_host }}
          VIRL_PASSWORD: ${{ secrets.virl_password }}
          VIRL_USERNAME: admin

      - name: Create the lab title
        run: |
          # Clean up matrix values by removing special characters
          CLEAN_ANSIBLE_VERSION=$(echo "${{ matrix.ansible-version }}" | sed 's/[^a-zA-Z0-9]//g')
          CLEAN_PYTHON_VERSION=$(echo "${{ matrix.python-version }}" | sed 's/[^a-zA-Z0-9]//g')

          if [[ "${{ github.event_name }}" == 'pull_request_target' ]]; then
            echo "CLABTITLE=${{ inputs.lab_title }}_PR${{ github.event.pull_request.number }}_${CLEAN_ANSIBLE_VERSION}_py${CLEAN_PYTHON_VERSION}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            shashort=$(git rev-parse --short HEAD)
            uuidval=$(uuidgen | cut -c 1-8)
            echo "CLABTITLE=${{ inputs.lab_title }}_${shashort}_${uuidval}_${CLEAN_ANSIBLE_VERSION}_py${CLEAN_PYTHON_VERSION}" >> $GITHUB_ENV
          fi

      - name: Print the lab title
        run: echo ${{ env.CLABTITLE }}

      - name: Add Lab Title to the lab file
        run: >-
          sed -i "s/title: ${{ inputs.network_os }}/title: ${{ env.CLABTITLE }}/" ${{ inputs.cml_lab }}
        working-directory: ${{ steps.identify.outputs.collection_path }}

      - name: Run integration tests
        if: ${{ !inputs.dry_run }}
        run: >-
          python3 -m pytest tests/integration
          --integration-tests-path ${{ inputs.integration_test_path }}
          --cml-lab ${{ inputs.cml_lab }}
          ${{ inputs.pytest_addopts }}
        env:
          ANSIBLE_FORCE_COLOR: "1"
          ANSIBLE_NETWORK_OS: ${{ inputs.network_os }}
          CML_SSH_PASSWORD: ${{ secrets.cml_ssh_password }}
          CML_SSH_PORT: 1122
          CML_SSH_USER: sysadmin
          VIRL_HOST: ${{ secrets.virl_host }}
          VIRL_PASSWORD: ${{ secrets.virl_password }}
          VIRL_USERNAME: admin
        working-directory: ${{ steps.identify.outputs.collection_path }}

      - name: Attempt to remove any labs in case the workflow was cancelled
        if: cancelled() || ${{ !inputs.dry_run }}
        run: echo ${{ env.CML_LABS }} | tr -d '\n' | xargs -d ',' -i sh -c  'cml use --id {} && cml rm --force --no-confirm'
        continue-on-error: true
        env:
          CML_VERIFY_CERT: false
          VIRL_HOST: ${{ secrets.virl_host }}
          VIRL_PASSWORD: ${{ secrets.virl_password }}
          VIRL_USERNAME: admin

      - name: Upload logs
        if: ${{ !inputs.dry_run }}
        uses: coactions/upload-artifact@v4
        with:
          name: logs-${{ matrix.ansible-version }}-py${{ matrix.python-version }}
          path: /home/runner/test_logs/
